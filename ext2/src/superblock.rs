use core::ops::{Deref, DerefMut, Shl};

use bitflags::bitflags;

use crate::{bytefield, bytefield_field_read, bytefield_field_write, check_is_implemented};

pub struct SuperblockArray([u8; 1024]);

impl SuperblockArray {
    pub fn as_slice(&self) -> &[u8] {
        &self.0
    }
}

impl From<[u8; 1024]> for SuperblockArray {
    fn from(value: [u8; 1024]) -> Self {
        Self(value)
    }
}

impl Default for SuperblockArray {
    fn default() -> Self {
        SuperblockArray([0_u8; 1024])
    }
}

impl Deref for SuperblockArray {
    type Target = [u8; 1024];

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}

impl DerefMut for SuperblockArray {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

bytefield! {
    #[derive(Debug, Eq, PartialEq)]
    pub struct Superblock (SuperblockArray) {
        num_inodes: u32 = 0,
        num_blocks: u32 = 4,
        num_superuser_reserved_blocks: u32 = 8,
        num_unallocated_blocks: u32 = 12,
        num_unallocated_inodes: u32 = 16,
        superblock_block_number: u32 = 20,
        log2_block_size: u32 = 24,
        log2_fragment_size: u32 = 28,
        blocks_per_group: u32 = 32,
        fragments_per_group: u32 = 36,
        inodes_per_group: u32 = 40,
        last_mount_time: u32 = 44,
        last_written_time: u32 = 48,
        mounts_since_fsck: u16 = 52,
        mounts_allowed_before_fsck: u16 = 54,
        magic_number: u16 = 56,
        state: u16 = 58,
        error_policy: u16 = 60,
        version_minor: u16 = 62,
        last_fsck: u32 = 64,
        fsck_force_interval: u32 = 68,
        os_id: u32 = 72,
        version_major: u32 = 76,
        uid_for_reserved_blocks: u16 = 80,
        gid_for_reserved_blocks: u16 = 82,

        // extended

        first_non_reserved_inode: u32 = 84,
        inode_size: u16 = 88,
        this_superblock_block_group: u16 = 90,
        optional_features: u32 = 92,
        required_features: u32 = 96,
        write_required_features: u32 = 100,
        fsid: [u8; 16] = 104,
        volume_name: [u8; 16] = 120,
        last_mount_path: [u8; 16] = 136,
        compression: u32 = 200,
        num_preallocate_blocks_file: u8 = 204,
        num_preallocate_blocks_directory: u8 = 205,
    }
}

impl Superblock {
    pub fn num_inodes(&self) -> u32 {
        self.num_inodes
    }

    pub fn num_blocks(&self) -> u32 {
        self.num_blocks
    }

    pub fn num_superuser_reserved_blocks(&self) -> u32 {
        self.num_superuser_reserved_blocks
    }

    pub fn num_unallocated_blocks(&self) -> u32 {
        self.num_unallocated_blocks
    }

    pub fn num_unallocated_blocks_mut(&mut self) -> &mut u32 {
        &mut self.num_unallocated_blocks
    }

    pub fn num_unallocated_inodes(&self) -> u32 {
        self.num_unallocated_inodes
    }

    pub fn superblock_block_number(&self) -> u32 {
        self.superblock_block_number
    }

    pub fn block_size(&self) -> u32 {
        u32::shl(1024, self.log2_block_size)
    }

    pub fn fragment_size(&self) -> u32 {
        u32::shl(1024, self.log2_fragment_size)
    }

    pub fn blocks_per_group(&self) -> u32 {
        self.blocks_per_group
    }

    pub fn fragments_per_group(&self) -> u32 {
        self.fragments_per_group
    }

    pub fn inodes_per_group(&self) -> u32 {
        self.inodes_per_group
    }

    pub fn last_mount_time(&self) -> u32 {
        self.last_mount_time
    }

    pub fn last_written_time(&self) -> u32 {
        self.last_written_time
    }

    pub fn mounts_since_fsck(&self) -> u16 {
        self.mounts_since_fsck
    }

    pub fn mounts_allowed_before_fsck(&self) -> u16 {
        self.mounts_allowed_before_fsck
    }

    pub fn magic_number(&self) -> u16 {
        self.magic_number
    }

    pub fn state(&self) -> State {
        State::from_bits_truncate(self.state)
    }

    pub fn error_policy(&self) -> ErrorPolicy {
        ErrorPolicy::from_bits_truncate(self.error_policy)
    }

    pub fn version_minor(&self) -> u16 {
        self.version_minor
    }

    pub fn last_fsck(&self) -> u32 {
        self.last_fsck
    }

    pub fn fsck_force_interval(&self) -> u32 {
        self.fsck_force_interval
    }

    pub fn os_id(&self) -> u32 {
        self.os_id
    }

    pub fn version_major(&self) -> u32 {
        self.version_major
    }

    pub fn uid_for_reserved_blocks(&self) -> u16 {
        self.uid_for_reserved_blocks
    }

    pub fn gid_for_reserved_blocks(&self) -> u16 {
        self.gid_for_reserved_blocks
    }

    pub fn first_non_reserved_inode(&self) -> u32 {
        self.first_non_reserved_inode
    }

    pub fn inode_size(&self) -> u16 {
        self.inode_size
    }

    pub fn this_superblock_block_group(&self) -> u16 {
        self.this_superblock_block_group
    }

    pub fn optional_features(&self) -> OptionalFeatures {
        OptionalFeatures::from_bits_truncate(self.optional_features)
    }

    pub fn required_features(&self) -> RequiredFeatures {
        RequiredFeatures::from_bits_truncate(self.required_features)
    }

    pub fn write_required_features(&self) -> ReadOnlyFeatures {
        ReadOnlyFeatures::from_bits_truncate(self.write_required_features)
    }

    pub fn fsid(&self) -> Ext2FsId {
        Ext2FsId(self.fsid)
    }

    pub fn volume_name(&self) -> &str {
        core::str::from_utf8(&self.volume_name).unwrap()
    }

    pub fn last_mount_path(&self) -> &str {
        core::str::from_utf8(&self.last_mount_path).unwrap()
    }

    pub fn compression(&self) -> u32 {
        self.compression
    }

    pub fn num_preallocate_blocks_file(&self) -> u8 {
        self.num_preallocate_blocks_file
    }

    pub fn num_preallocate_blocks_directory(&self) -> u8 {
        self.num_preallocate_blocks_directory
    }
}

#[derive(Copy, Clone, Debug, Eq, PartialEq)]
pub struct Ext2FsId([u8; 16]);

bitflags! {
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct OptionalFeatures: u32 {
        const PREALLOCATE_FOR_DIRECTORY = 0x0001;
        const AFS_SERVER_INODES_EXIST = 0x0002;
        const HAS_JOURNAL = 0x0004;
        const INODES_EXTENDED_ATTRIBUTES = 0x0008;
        const CAN_RESIZE = 0x0010;
        const DIRECTORIES_USE_HASH_INDEX = 0x0020;
    }
}

bitflags! {
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct RequiredFeatures: u32 {
        const COMPRESSION_USED = 0x0001;
        const DIRECTORY_ENTRIES_HAVE_TYPE = 0x0002;
        const NEEDS_JOURNAL_REPLAY = 0x0004;
        const USES_JOURNAL_DEVICE = 0x0008;
    }
}

bitflags! {
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct ReadOnlyFeatures: u32 {
        const SPARSE_SUPERBLOCK_AND_GDTS = 0x0001;
        const USE_64BIT_FILE_SIZE = 0x0002;
        const DIRS_STORED_AS_BINARY_TREE = 0x0004;
    }
}

bitflags! {
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct State: u16 {
        const CLEAN = 1;
        const ERRONOUS = 2;
    }
}

bitflags! {
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct ErrorPolicy: u16 {
        const IGNORE = 1;
        const REMOUNT_READ_ONLY = 2;
        const KERNEL_PANIC = 3;
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_superblock_try_from() {
        // bytes of a superblock generated by `mkfs.ext2`
        let data = [
            0x80, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0xca, 0x03,
            0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x80, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, 0x5d, 0x7f, 0x64, 0x00, 0x00, 0xff, 0xff,
            0x53, 0xef, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc5, 0x5d, 0x7f, 0x64, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x0b, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x02, 0x00,
            0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x77, 0x4b, 0x94, 0xce, 0x3d, 0x05, 0x4b, 0x71,
            0x98, 0xfc, 0xfc, 0xf6, 0x37, 0xfd, 0x2b, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x38,
            0x05, 0x06, 0x72, 0xb2, 0x44, 0xcd, 0xbb, 0x20, 0x4e, 0xa1, 0xcb, 0x69, 0xa6, 0x1d,
            0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc5, 0x5d,
            0x7f, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
            0x20, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00,
        ];
        let sb = Superblock::try_from(SuperblockArray::from(data)).unwrap();

        // result manually validated via `debugfs`
        assert_eq!(
            Superblock {
                num_inodes: 128,
                num_blocks: 1024,
                num_superuser_reserved_blocks: 51,
                num_unallocated_blocks: 970,
                num_unallocated_inodes: 117,
                superblock_block_number: 1,
                log2_block_size: 0,
                log2_fragment_size: 0,
                blocks_per_group: 8192,
                fragments_per_group: 8192,
                inodes_per_group: 128,
                last_mount_time: 0,
                last_written_time: 1686068678,
                mounts_since_fsck: 0,
                mounts_allowed_before_fsck: 65535,
                magic_number: 61267,
                state: 1,
                error_policy: 1,
                version_minor: 0,
                last_fsck: 1686068677,
                fsck_force_interval: 0,
                os_id: 0,
                version_major: 1,
                uid_for_reserved_blocks: 0,
                gid_for_reserved_blocks: 0,
                first_non_reserved_inode: 11,
                inode_size: 256,
                this_superblock_block_group: 0,
                optional_features: 0x38,
                required_features: 2,
                write_required_features: 3,
                fsid: [119, 75, 148, 206, 61, 5, 75, 113, 152, 252, 252, 246, 55, 253, 43, 72],
                volume_name: [0_u8; 16],
                last_mount_path: [0_u8; 16],
                compression: 0,
                num_preallocate_blocks_file: 0,
                num_preallocate_blocks_directory: 0,
            },
            sb
        );

        let reversed = Into::<SuperblockArray>::into(sb);
        assert_eq!(data[..206], reversed[..206]); // only check the actual superblock data
    }
}
